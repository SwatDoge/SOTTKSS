obj config = {
	spin_sound_asset_id: "37203",
	end_spin_sound_asset_id: "37203",
	star_music_asset_id: "39573",
	image_mod_url: "https://krunker-user-assets.nyc3.cdn.digitaloceanspaces.com/md52292/mod.zip",
	shader_mod_url: "https://krunker-user-assets.nyc3.cdn.digitaloceanspaces.com/md54596/mod.zip",
	spin_time: 2000,
	spin_chances: 10,
	speed_ability_boost: 1.05,
	speed_ability_boost_midair: 0.0047,
	speed_ability_decel_midair: 0.9996,
	abilities: obj[
		# at least 1 ability
		# atleast 1 ability with a cooldown of 0
		# cooldowns reset every round
  		{name: "ability_speed", 	display_name: "Mushroom", 			amount: 1, duration: 4000, rarity: 20, cooldown: 0},
		{name: "ability_speed_x2", 	display_name: "Double Mushroom", 	amount: 1, duration: 4000, rarity: 15, cooldown: 0},
 		{name: "ability_speed_x3", 	display_name: "Triple Mushroom", 	amount: 3, duration: 4000, rarity: 10, cooldown: 0}
#  		{name: "ability_banana", 	display_name: "Banana", 			amount: 1, duration: 0, rarity: 20, cooldown: 0},
#  		{name: "ability_banana_x2", display_name: "Double Banana", 		amount: 2, duration: 0, rarity: 15, cooldown: 0},
#  		{name: "ability_banana_x3", display_name: "Triple Banana", 		amount: 3, duration: 0, rarity: 10, cooldown: 0},
# 		{name: "ability_inc", 		display_name: "Inc", 				amount: 1, duration: 5000, rarity: 20, cooldown: 0},
# 		{name: "ability_lightning", display_name: "Thunder cloud", 		amount: 1, duration: 3000, rarity: 20, cooldown: 45000},
#  		{name: "ability_star", 		display_name: "Star", 				amount: 1, duration: 16000, rarity: 20, cooldown: 0}
	]
};
obj client = {
	ability_objects: {
		bananas: obj[]
	},
	players: obj[
	# 	ability: {
	# 		name: "none",
	# 		display_name: "none",
	# 		active: false,
	# 		active_duration: 0,
	# 		ability_duration: 0,
	# 		amount: 0
	# 	},
	],
	spin: {
		active: false,
		spins: obj[],
		frame: 0,
		sound: {}
	}
};

bool request_popup_removal = false;

# utils 
obj action get_ability_by_id(num id) {
	return (obj) config.abilities[id];
}

num action player_index_by_id(obj[] player_array, str player_id) {
	
	num lengthof_playerarray = lengthOf player_array;
	for (num i = 0; i < lengthof_playerarray; i++){
		if ((str) player_array[i].id == player_id){
			return i;
		}
	}
	return -1;
}

obj action get_self(obj[] player_array){
	num lengthof_playerarray = lengthOf player_array;
	for (num i = 0; i < lengthof_playerarray; i++){
		if ((bool) player_array[i].isYou){
			return player_array[i];
		}
	}
	return {};
}

# custom actions


# spins = exception
action reset_spin() {
	GAME.log("client reset!");
	if (notEmpty (obj)client.spin.sound) {
		client.spin.sound.stop();
	}
	
	client.spin = {
		spins: str[],
		frame: 0,
		active: false,
		sound: {}
	};
}

# ui
action ability_interaction_element(bool shown, str ability_name, num amount) {
	GAME.UI.addDIV("interactMsgCustom", true, "bottom: 320px; position: absolute; left: 50%; transform: translate(-50%, 0); font-size: 25px; line-height: 75px; padding-left: 45px; padding-right: 45px; color: #f1f1f1; border: 2px solid #fff; border-radius: 4px; background-color: rgba(0, 0, 0, 0.2);", "inGameUI");
	GAME.UI.updateDIV("interactMsgCustom", "display", shown ? "block" : "none");

	if (shown) {
		GAME.UI.addDIV("start_text", true, "display: inline; color: white;", "interactMsgCustom");
		GAME.UI.addDIV("key_text", true, " display: inline; color: #FBC02D;", "interactMsgCustom");
		GAME.UI.addDIV("end_text", true, "display: inline; color: white;", "interactMsgCustom");

		GAME.UI.updateDIVText("start_text", "Press ");
		GAME.UI.updateDIVText("key_text", "[G]");
		GAME.UI.updateDIVText("end_text", " to use " + (str) ability_name + " (" + (str) amount + "x)");
	}
	else {
		GAME.UI.updateDIVText("interactMsgCustom", "");
	}
}

# abilities
bool action allow_use_ability() {
	obj self = get_self((obj[]) client.players);
	return (!(bool) client.spin.active && (num) self.ability.amount > 0 && (str) self.ability.name != "none" && (bool) self.active);
}

action reset_ability(obj player) {
	
	# cs
	if ((bool) player.isYou) {
		ability_interaction_element(false, "none", 0);
		GAME.UI.updateDIV("GamblingUI", "background-image", "none");
	}

	player.ability = {
		name: "none",
		display_name: "none",
		active: false,
		active_duration: 0,
		ability_duration: 0,
		amount: 0
	};
}

action set_ability(obj player, obj ability) {
	
	# cs
	if ((bool) player.isYou) {
		ability_interaction_element(true, (str) ability.name, (num) ability.amount);
	}

	player.ability = {
		name: ability.name,
		display_name: ability.display_name,
		active: false,
		active_duration: 0,
		ability_duration: ability.duration,
		amount: ability.amount
	};
}

action end_ability(obj player) {
	GAME.log("End ability " + (str) player.ability.name + " of player " + (str) player.username);
	
	if ((str) player.ability.name == "ability_lightning") {
		num lengthof_players = lengthOf client.players;
		for (num i = 0; i < lengthof_players; i++) {
			if ((str) client.players[i].ability.name != "ability_star" && (str) client.players[i].id != (str) player.id) {
				client.players[i].ability_attributes.thunder.object.delete();
				
				
				if ((bool) client.players[i].isYou) {
					GAME.CAMERA.rotation.x = 0;
					GAME.CAMERA.rotation.y = 0;			
					GAME.CAMERA.attach();
					GAME.CAMERA.rotation.x = (num) client.players[i].ability_attributes.thunder.rotation.x;
					GAME.CAMERA.rotation.y = (num) client.players[i].ability_attributes.thunder.rotation.y;
				}
		
				client.players[i].ability_attributes.thunder = {};
			}
		}
	}
	if ((str) player.ability.name == "ability_inc") {
		GAME.log("test2");
		if (!(bool) player.isYou) {
			GAME.MODS.reset();
			request_popup_removal = true;
			GAME.MODS.load((str) config.image_mod_url);
		}
	}
	
	if ((str) player.ability.name == "ability_star") {
		GAME.log(player.ability_attributes.star.sound);
		player.ability_attributes.star.sound.stop();
		player.ability_attributes.star = {};
	}
}

action start_ability(obj player) {
	GAME.log("Starting ability " + (str) player.ability.name + " of player " + (str) player.username);
	
	# start lightning
	if ((str) player.ability.name == "ability_lightning") {
		num lengthof_players = lengthOf client.players;
		for (num i = 0; i < lengthof_players; i++) {
			if ((str) client.players[i].ability.name != "ability_star" && (str) client.players[i].id != (str) player.id) {
				client.players[i].ability_attributes = {};
				client.players[i].ability_attributes.thunder = {};
				client.players[i].ability_attributes.thunder.rotation = {};
				client.players[i].ability_attributes.thunder.rotation.x = GAME.CAMERA.rotation.x;
				client.players[i].ability_attributes.thunder.rotation.y = GAME.CAMERA.rotation.y;
				client.players[i].ability_attributes.thunder.object = GAME.SCENE.addAsset("37325g", client.players[i].position.x, (num) client.players[i].position.y + 15, client.players[i].position.z, 1, "#FFF");
				
				if ((bool) client.players[i].isYou) {
					GAME.CAMERA.detach();
					reset_spin();
					reset_ability((obj) client.players[i]);
				}
			}
		}
	}

	if ((str) player.ability.name == "ability_inc") {
		if (!(bool) player.isYou) {
			GAME.MODS.load((str) config.shader_mod_url);
		}
	}

	if ((str) player.ability.name == "ability_star") {
		player.ability_attributes = {};
		player.ability_attributes.star = {};
		player.ability_attributes.star.sound = GAME.SOUND.play2D((str) config.star_music_asset_id, 1, 1, true);
	}
}

action while_ability(num delta, obj player) {
	GAME.log("While ability " + (str) player.ability.name + " of player " + (str) player.username);

	if ((str) player.ability.name == "ability_speed" || (str) player.ability.name == "ability_speed_x2" || (str) player.ability.name == "ability_speed_x3" || (str) player.ability.name == "ability_star"){

	}
	
	if ((str) player.ability.name == "ability_lightning") {
		num lengthof_players = lengthOf client.players;
		for (num i = 0; i < lengthof_players; i++) {
			if ((str) client.players[i].ability.name != "ability_star" && (str) client.players[i].id != (str) player.id) {
				client.players[i].onGround = false;
				client.players[i].ability_attributes.thunder.object.position.x = client.players[i].position.x;
				client.players[i].ability_attributes.thunder.object.position.y = (num) client.players[i].position.y + 15;
				client.players[i].ability_attributes.thunder.object.position.z = client.players[i].position.z;
				
				if ((bool) client.players[i].isYou) {
					GAME.CAMERA.rotation.x += (delta / 1000 * Math.PI);
					GAME.CAMERA.rotation.y += (delta / 1000 * Math.PI) * 2;
				}
			}
		}
	}
}

action update_ability(obj player, str type, num delta) {
	if (type == "while") {
		(num) player.ability.active_duration += delta;
		while_ability(delta, player);
		return;
	}
	else if (type == "start") {
		player.ability.active = true;
		player.ability.active_duration = 0;
		(num) player.ability.amount--;
		
		# cs
		if ((bool) player.isYou) {
			ability_interaction_element((num) player.ability.amount > 0, (str) player.ability.name, (num) player.ability.amount);
		}
		
		start_ability(player);
	}
	else if (type == "end") {
		end_ability(player);

		player.ability.active = false;
		if ((num) player.ability.amount < 1) {
			reset_ability(player);
		}
	}
}

# spins
bool action allow_use_spin() {
	obj self = get_self((obj[]) client.players);
	return (!(bool) client.spin.active && (num) self.ability.amount < 1 && (str) self.ability.name == "none" && (bool) self.active);
}

action start_spin(num item_id) {
	obj[] abilities = obj[];

	num lengthof_abilities = lengthOf config.abilities;
	for (num chance_index = 0; chance_index < (num) config.spin_chances; chance_index++) {
		obj random_ability = get_ability_by_id(UTILS.randInt(0, lengthof_abilities - 1));
		addTo abilities random_ability;
	}

	obj final_ability = get_ability_by_id(item_id);
	addTo abilities final_ability;

	client.spin = {
		active: true,
		frame: 0,
		spins: abilities,
		sound: GAME.SOUND.play2D((num) config.spin_sound_asset_id, 1, 1, true)
	};
}

action end_spin(obj ability) {
	reset_spin();
	set_ability(get_self((obj[]) client.players), ability);

	GAME.UI.updateDIV("GamblingUI", "background-position-y", "0px");
	GAME.SOUND.play2D((num) config.spin_complete_sound, 1, 1, false);
}

action while_spin(num delta) {
	(num) client.spin.frame += delta;
	num lengthof_spins = lengthOf client.spin.spins;
	num total_pixels = ((num) config.spin_chances * 512) + 256;
	num pixel_time_ratio = total_pixels / (num) config.spin_time;
	num spin_index = Math.floor((((num) client.spin.frame / (num) config.spin_time) * (num) config.spin_chances));

	if (spin_index > lengthof_spins) {
		spin_index = lengthof_spins - 1;
	}
	
	GAME.UI.updateDIV("GamblingUI", "background-position-y", toStr ((((num) client.spin.frame * pixel_time_ratio) % 512) - 256) + "px");
	GAME.UI.updateDIV("GamblingUI", "background-image", "var(--" + (str) client.spin.spins[spin_index].name + ")");
	
	if ((num) client.spin.frame > (num) config.spin_time) {
		end_spin((obj) client.spin.spins[lengthof_spins - 1]);
	}
}

# official hooks
public action onKeyPress(str key, num code) {
	if ((bool) GAME.PLAYERS.getSelf().active) {
		if (code == 71 && allow_use_ability()) {
			GAME.NETWORK.send("trigger_ability", {});
		}
	}
}

public action onPlayerUpdate(str id, num delta, obj inputs) {
	if ((bool) inputs.restK){
		GAME.log(client.players);
	}

	num player_index = player_index_by_id((obj[]) client.players, id);
	obj player = (obj) client.players[player_index];

	player.registerSyncValues("ability");

	if((num) inputs.movDir < 0 && ((str) player.ability.name == "ability_speed" || (str) player.ability.name == "ability_speed_x2" || (str) player.ability.name == "ability_speed_x3" || (str) player.ability.name == "ability_star") && (bool) player.ability.active) {
		num speed = (num) config.speed_ability_boost;
		if (!(bool) player.onGround) {
			num speed = (num) config.speed_ability_boost_midair;
		}
		(num) player.velocity.x *= speed;
		(num) player.velocity.z *= speed;
	}
}

num update_delta = GAME.TIME.now();
public action update(num delta) {
	num real_delta = GAME.TIME.now() - update_delta;
	update_delta = GAME.TIME.now();

	if ((bool) client.spin.active) {
		while_spin(real_delta);
	}

	num lengthof_players = lengthOf client.players;
	for (num i = 0; i < lengthof_players; i++) {
		if ((bool) client.players[i].ability.active) {
			GAME.log((num) client.players[i].ability.active_duration, (num) client.players[i].ability.ability_duration);
			str state = (num) client.players[i].ability.active_duration < (num) client.players[i].ability.ability_duration ? "while" : "end";
			update_ability((obj) client.players[i], state, real_delta);
		}
	}

	if (request_popup_removal && GAME.UI.getProp("popupHolder", "display") == "block") {
		GAME.UI.updateDIVText("popupHolder", "");
	}
}

public action start() {
	client.players = GAME.PLAYERS.list();
	GAME.MODS.load((str) config.image_mod_url);
	GAME.UI.addDIV("GamblingUI", true, "image-rendering: pixelated; background-repeat: no-repeat; background-color: rgba(0, 0, 0, 0.2); background-position-x: center; background-position-y: -256px; background-size: contain; border-color: gray; border-style: solid; border-width: 5px; width: 250px; height: 250px; border-radius: 50%;", "topLeftHolder");	
}

public action onPlayerDeath(str id, str killerID) {
	num player_index = player_index_by_id((obj[]) client.players, id);
	obj player = (obj) client.players[player_index];
	update_ability(player, "end", 0);

	reset_ability(player);

	if ((bool) player.isYou) {
		reset_spin();
	}
}

public action onGameEnd() {
	client.ability_objects = {
		bananas: obj[]
	};
}

public action onPlayerSpawn(str id) {
	num player_index = player_index_by_id((obj[]) client.players, id);

	if (player_index == -1) {
		obj player = GAME.PLAYERS.findByID(id);
		reset_ability(player);
		addTo (obj[]) client.players player;
	}
}

public action onNetworkMessage(str id, obj data) {	
	if (id == "trigger_ability") {
		num player_index = player_index_by_id((obj[]) client.players, (str) data.pid);
		obj player = (obj) client.players[player_index];
		if ((str) player.ability.name == "none") {
			GAME.log(data);
			set_ability(player, get_ability_by_id((num) data.ab));
		}
		
		update_ability(player, "start", 0);
	}
	
	if (id == "start_spin") {
		start_spin((num) data.ab);
	}
	
	if (id == "user_left") {
		num player_index = player_index_by_id((obj[]) client.players, (str) data.pid);
		update_ability((obj) client.players[player_index], "end", 0);
		remove client.players[player_index];
	}
}